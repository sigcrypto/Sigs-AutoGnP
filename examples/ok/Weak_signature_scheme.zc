(* The General case version of the zc code is provided in the link "https://github.com/sigcrypto/sigs-autognp/tree/AutoGnP/examples/new"
*)
(* Weak Signature Scheme ((Special case q = 3)) *) 
bilinear_map ez: G * G -> G_t. 
bilinear_map zprime: G * G -> G_t. 

adversary A1 : () -> (Fq * Fq).
adversary A2 : (G * G * G * G_t * Fq * Fq) -> (G * G).
adversary B1 : () -> (G).
adversary B2 : (Fq * G *  G) -> Bool.

oracle Sign : () -> (G * G).
oracle Sign1 : ()-> (G). 

adversary A_qsdh: (G * G * G * G) -> Bool.
assumption qsdh
 [r1,r2,r3,c<-$ Fq; b <- A_qsdh(g^(r1),g^(r2),g^(r3),g^(1/(r1+c)));] 
 [r1,r2,r3,t <-$ Fq; b <- A_qsdh(g^(r1),g^(r2),g^(r3),g^(t));].

bound_adv [   
 a1,a2,a3<-$ Fq; 
 mPrime<-$ Fq; 

 x<-$ Fq; 
 let A_1 = g^(x);                  
 let A_2 = g^(x*x);                       
 let A_3 = g^(x*x*x);

  (m_1,m_2) <- A1();
  y <-$ Fq ;
  alpha1, alpha2, alpha3 <-$ Fq;   
  g1p,g2p <-$ Fq;

  let g2prime1= g^(g2p);  
  let g1prime1= g^(g1p);

  let buffer = A_1^alpha1;
  let g2prime2 = g2prime1 * buffer;   
  let g2prime = g2prime2 * A_2^alpha2;  
  let zprime = ez(g1prime1, g2prime);

  let h1 = g^y;
  let h = h1 * A_2^alpha1; 
  let pk = (g1prime1, g2prime,h,zprime);		
  m1,m2 <-$ Fq;
  S1',S2' <-$ Fq;						
  let S11 = g^(S1');
  (*let S2 = g_2^(S2');*)   
 
  mPrime1 <-$ Fq;
  assert((x + mPrime1) <> 0); 
  let sigmaPrime = g^(1/(x+mPrime1));

  (* Challenger generates signatures*)
  si <-$ Fq; 
  let sigma1 = g^(si);
  beta1,beta2 <-$ Fq; 
     
   (sigma_11,sigma_21) <- A2(g1prime1, g2prime,h,zprime,m_1,m_2) with
   Sign() = { 
   let S1 = S11 * A_1^beta1;
   (* let sigma_1 = log(S1); *)   (*FIX Me*) 
   let sigma_1 = g^y;
   (* let be2 =  g_2^(a2^beta_2);    *)
   let S2 = S1 * A_2^beta2;
   let sigma_2 = g^y;
   (* let sigma_2 = log(S2); *) 
   return(sigma_1,sigma_2)   
   };
    
   negGamma <-$ Fq; (* assert (negGamm <> 0); *)
   assert(negGamma<>0);

   (w2) <- B1() with   
   Sign1() = {
   gamma1,gamma2<-$ Fq;                           
   fin <-$ Fq;  
   let final1 = g^(fin);
   let final2 = final1 * A_1^(-gamma1);	  	
   let final = final2 * A_2^(-gamma2); 
   let w1 = (sigmaPrime * final)^(1/negGamma);
   return (w1) 
   }; 

b <-$ Bool; 
d <-$ Fq;
let ret = b?w2:g^d; 
b' <- B2(mPrime1,w2,g^d);   
] : b = b'.  
norm.

move a1 1.
move a2 2.
move a3 3.
abstract 5 arg (g^(a1), g^(a1*a1), g^(a1*a1*a1),g^(1/(a1+mPrime))).
abstract 30 res (b = b'). 
assumption_decisional qsdh -> [5 res] q. 
norm.

indep!.
print_proof!.
qed.
extract "extraction/weak_done.zc".
