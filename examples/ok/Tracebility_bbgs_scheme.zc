(* The General case version of the zc code is provided in the link "https://github.com/sigcrypto/sigs-autognp/tree/AutoGnP/examples/new"
*)
(*Tracebility Signautre *)
bilinear_map e : G_1 * G_2 -> G_t.
adversary B1:() -> (G_1 * G_1 * G_1 * G_2).
adversary A1:(G_1 * G_2 * G_1 * G_1 * G_1 * G_2) -> (BS_s * BS_s * BS_s).
adversary A2:(G_1 * G_2 * G_1 * G_1 * G_1 * G_2 * BS_s * BS_s * BS_s * G_1 * Fq) -> (Bool).
 
oracle Sign1:() -> (BS_s * BS_s * BS_s).
oracle Sign: () -> (Bool).
oracle Sign3: () -> (G_1 * G_1 * G_1 * G_2).
operator H : Fq -> BS_s.
operator Hash : (BS_s * BS_s * BS_s * G_1 * G_1 * G_1 * G_1 * G_1 * G_t * G_1 * G_1) -> (Fq).

adversary A_trace: (Fq * G_1) -> Bool.

assumption weak_bbsig  
[mPri,x<-$ Fq; b <-A_trace(mPri, g_1^(1/(mPri+ x)));]
[mPri,t <-$ Fq; b <-A_trace(mPri, g_1^(t));].    

(* Signature adversary *)
bound_adv [
    mPrime,x' <-$ Fq;
    a1,a2,a3,gamma <-$ Fq; 
    (* Generate GS adversary public key *)
    (j, k, l, o) <- B1() with
    Sign3() = { 
    let u = g_1^(a1); let v = g_1^(a2); let h = g_1^(a3);
    let w = g_2^(gamma); 
    return (u, v, h, w)
  }; 
 
    s1,s2<-$ Fq; 
    b <-$ Bool;
    let pkgs = (g_1, g_2, j, k, l, o);

    H1,H2,H3 <-$ Fq;
    (d,e,f) <- A1(g_1, g_2, j, k, l, o) with 
    Sign1() = {
          let H11 = H(H1);
          (*Loop 1*)
          let H12 = (H1 = H2)? H11: H(H2);
          (*Loop 2 *)
          let H13 = (H2 = H3)? H12: H(H3);
          return (H11,H12,H13)
          }; 
    
     X, i'<-$Fq;      
     alpha,beta<-$ Fq; 
     let A = g_1 ^ (1/(X + gamma)); 
     let T1 = g_1^ (a1 * alpha); let T2 = g_1 ^ (a2 * beta);
     let T3 = A * g_1 ^ (a2 * beta); 
     let delta1 = X * alpha; let delta2 = X * beta;

     rAlpha, rBeta, rX , rDelta1, rDelta2 <-$ Fq;
     let R1 = g_1 ^ (a1 * rAlpha); let R2 = g_1 ^ (a2 * rBeta);
     let R4 = (T1 ^ rX) * g_1 ^ (-a2 * rDelta1);
     let R5 = (T2 ^ rX) * g_1 ^ (-a2 * rDelta2);
     let R3 = (e(T3,g_2)^rX) * (e(g_1^a3,g_2^gamma)^(-rAlpha-rBeta)) * (e(g_1^a3,g_2)^(-rDelta1-rDelta2));
     let c = Hash(d, e, f, T1, T2, T3, R1, R2, R3, R4, R5);
     let sAlpha = rAlpha + (c * alpha);
     let sBeta = rBeta + c*delta2;
     let sX = rX + (c * X);
     let sDelta1 = rDelta1 + c*delta1;
     let sDelta2 = rDelta2 + c*delta2;
     let sigma =(T1, T2, T3, c, sAlpha, sBeta, sX, sDelta1, sDelta2);

     di <-$ Fq; 
     b' <- A2(g_1, g_2, j, k, l, o, d, e, f, A, X);
     let L = T3/(T1^s1 * T2^s2);  
   ]: b = b'. 
   norm.

abstract 3 arg1 (mPrime, g_1 ^ (1/(mPrime + x'))). 
abstract 27 res (b = b').
assumption_decisional weak_bbsig -> [arg1 res] q. 
norm.
indep!.
print_proof!.
qed.
extract "extraction/Anonimity_bbgs.zc".

(*The General case version of the zc code is provided in this link "https://github.com/sigcrypto/sigs-autognp/tree/AutoGnP/examples/new"
*)
