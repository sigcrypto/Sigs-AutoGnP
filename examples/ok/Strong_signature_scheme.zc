(* The General case version of the zc code is provided in the link "https://github.com/sigcrypto/sigs-autognp/tree/AutoGnP/examples/new"
*)
(* Strong Signature Scheme (Special case q = 3) *)   
bilinear_map ez: G * G -> G_t. 
bilinear_map e: G_1 * G_2 -> G_t. 

(* Oracles *)
oracle Sign : () -> (G * G).
oracle Sign1 : ()-> (G).

(* Weak adversary, B *)  
adversary B1 : () -> (Fq * Fq).  		
adversary B2 : () -> (G_1 * G_2 * G_2 * G_t * G_1 * G_1).
adversary B3 : () -> (Fq).
adversary B4 : (Fq * G_1 * Fq) -> (Fq * G_1). 
adversary B5 : (Fq * Fq * G_1 * G_1) -> Bool.

adversary A1 : (G_1 * G_2 * G_2 * G_2 * G_t) -> (Fq * Fq).
adversary A2 : (G_1 * G_2 * G_2 * G_2 * G_t * Fq * Fq) -> (G_1).
adversary A3 : (G_1 * G_2 * G_2 * G_2 * G_t * Fq * Fq) -> (G_1).

adversary A_weak : (Fq * G_1) -> Bool. 
assumption weak_bbsig  
[mPri,x,y,rPri<-$ Fq; b <-A_weak(mPri, g_1^(1/(mPri+ (y*rPri) + x )));]
[mPri,t <-$ Fq; b <-A_weak(mPri, g_1^(t));].   


 (* Weak B's challenger *)
oracle bChallenger: ()->(G_1 * G_2 * G_2 * G_t * G_1 * G_1).
oracle sign1 : ()->(G_1).
oracle sign2 : ()->(Fq).
oracle sign3 : ()->(G_1). 
oracle sign4 : ()->(Fq * G_1).  

(* B gets pk and signatures from its challenger *)
bound_adv [    
 mPrim, rPrim, x1',y1 <-$ Fq;
 a1,a2,a3<-$ Fq; 

 (w_1,w_2) <- B1();
ArrFq_
 
   
  mPrime, rPrime, x'',y <-$ Fq; 
  assert((mPrime + (y * rPrime) + x'') <> 0);
  (* S1',S2' <-$ Fq;*)  
    
  (* S1,S2 <-$ Fq;
  let S1 = g_1^S1';  let S2 = g_1^S2';*)
  x3,c,g1p8,g2p8,x <-$ Fq;
  let u = g_2^x;
  assert((x + w_1)<>0); 
  assert((x + w_2)<>0);

  assert((x3+c)<>0); 
  let x1=g^(1/(x3+c)); 
  
  let g2prime18 = g_2^(g2p8);
  let g1prime18 = g_1^(g1p8);  
     
  let zp = e(g1prime18,g2prime18); 
  (* Challenger does setup, returns public key and signatures *)
  (g1,g2,u1,zp1,S118,S128) <- B2() with
  bChallenger() = { 
  let pk = (g_1,g_2,u,zp);
  let S1 = g_1^(1/(x + w_1));      
  let S2 = g_1^(1/(x + w_2));  
  (*  return (g_1,g_2,u,e,S1,S2)*) (*FIXME*)
  return (g_1,g_2,u,zp,S1,S2) 
}; 

  (*Challenge-response phase of strong adversary *)
  cmode <-$ Bool; 
  x' <-$ Fq;
  let pk1 = (g_1^1, g_2^1, u1, g_2^(y), zp1);
  let pk2 = (g_1^1, g_2^1, u1, g_2^(x'),zp1); 
  let zen = (cmode?(pk1 = (g_1^1, g_2^1, u1, g_2^(y), zp1)):(pk2 = (g_1^1, g_2^1, u1, g_2^(x'),zp1)));

  m_1,m_2 <-$ Fq;
  r_1,r_2 <-$ Fq;	                        
  omeg1,omeg2<-$ Fq; 
  let Omega1 = g_2^omeg1;
  let Omega2 = g_2^omeg2;

 
  let t1 = (m_1,r_1,Omega1); 
  let l=0;
(* hList_1 <-$ t1; *) (*Fixme*)
let t2 = (m_2,r_2,Omega2); 
(* hList_2 <-$ t2; *)  (*Fixme*) 
(m11,m12) <- A1(g_1^1, g_2^1, u1, g_2^(y), zp1);

(*----for Cmode 0 Begin--------*)
  
(sigmaPrime1) <- A2(g_1^1, g_2^1, u1, g_2^(y), zp1,m11,m12) with 
sign1() = {

guard (cmode <> false); 
let R1 = (x'+ m11)/w_1;
let tup1 = g_2^(m11) * u1^(r_1);
let sigmaPrime2 = g_1^(1/(mPrime + (y * rPrime) + x''));

let R2 = (x'+ m12)/w_2;
let tup2 = g_2^(m12) * u1^(r_2);
let sigmaPrime = g_1^(1/(mPrime + (y * rPrime) + x''));
return (sigmaPrime) 
};

(wPrime2) <- B3() with 
sign2()= { 
  guard (cmode <> true);
 let wPrime = mPrime + y * rPrime;
 return (wPrime)
};
 (*------for Cmode 0 End--------*)

 (*----for Cmode 1 begin--------*)
(sigmaPrime3)<-A3(g_1^1, g_2^1, u1, g_2^(x'),zp1,m11,m12) with sign3()= {
  guard (cmode <> true);
  let R1 = (x'+ m11)/w_1; 
  let tup1 = g_2^(m11)*u1^(r_1);
  guard((mPrime + y * rPrime + x'')= 0);
  let sigmaPrime2 = g_1^(1/(mPrime + (y * rPrime) + x''));
 
  let R2 = (x'+ m12)/w_2; 
  let tup2 = g_2^(m12)*u1^(r_2);
  let sigmaPrime = g_1^(1/(mPrime + (y * rPrime) + x''));
  return (sigmaPrime)    
 }; 

mi,ri <-$ Fq; let omegi = g_2^(mi+ri);
assert((rPrime - ri)<>0);
let tau = (mPrime - mi)/(rPrime - ri);
assert((tau + mPrime + y *rPrime)<>0); 

 (mPrimeR,gen) <- B4(mPrime , sigmaPrime3, rPrime) with
 sign4()= {
 guard (cmode<>true);  
 (*(mi,ri,omegi) = read (tup,i); *)
 (* B recovers the secret key, x *)
 return (mPrime, g_1^(1/(tau + mPrime + y *rPrime))) 
 };

  b <-$ Bool;
  d <-$ Fq;
  let ret = b?sigmaPrime3:g_1^d;   
  b' <- B5(mPrime,rPrime,sigmaPrime3,g_1^d);
]: b = b'.  
norm.


move mPrim 1. 
move x1' 2.
move y1 3.
move rPrim 4.
abstract 5 arg1 ((mPrim + (y1*rPrim)), g_1^(1/(mPrim+ x1'+ (y1*rPrim)))). 
abstract 44 res (b = b').
assumption_decisional weak_bbsig -> [arg1 res] q. 
norm.

indep!.
print_proof!.
qed.
extract "extraction/Strong_signature_scheme.zc".
