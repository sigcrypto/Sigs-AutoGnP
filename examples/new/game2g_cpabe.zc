bilinear_map e: G * G -> G_t.
 
(* Oracles *)
oracle B2 : () -> (G * G * G * G * G * G * G * G * G * G * G * G * G * G * G).
oracle B3 : () -> (G * G * G * G * G * G * G * G * G * G).
oracle KeyGen : ()-> (Fq * G * G * G * G * G * G).
oracle B4 : () -> (G * G * G * G * G).

(* adversary *)
adversary B1 : () -> (Fq * G * G * G * G * G * G).
adversary A2 : (Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq ) -> (G * G * G * G * G * G * G * G * G * G ).
adversary A1 : (Fq * G * G * G_t * Fq * Fq * Fq) -> (G * G * G * G * G * G * G * G * G * G * G * G * G * G * G).
adversary A3 : (Fq * G * G * G_t * Fq * Fq * Fq) -> (G * G * G * G * G).
adversary A4 : (Fq * G * G * G_t * Fq * Fq * Fq * G * G * G * G * G) -> Bool.
adversary A5 : (Fq * G * G * G_t) -> Bool.

(* Assumption *)
adversary game2: (G * G * G * G * G * G * G_t) -> Bool.
assumption SDA2_game2
[r1,r2,r3,c,d<-$ Fq; b <- game2(g^1,g^(r1),g^(r2),g^(r3),g^(c),g^(d),g_t^((r1*r2)+r3+(c*d)));]
[r1,r2,r3,c,d,t <-$ Fq; b <- game2(g^1,g^(r1),g^(r2),g^(r3),g^(r2*c),g^(r3*d),g_t^(t));].

bound_adv [
    u <-$Bool;
    (N,gprime,g1,X,X3,Y,T) <- B1() with (* included X1*X2,Y1*Y2 terms*)
    KeyGen()={
      p1,p2,p3,Nr<-$Fq;(*gprime cannot be FQ ask*)(*1.1.1*)
      let X1r = g^p1; (*1.1.2*)
      let Y2r = g^p2; (*1.1.2*)
      let X2r = g^p2;
      let Xr = X1r* X2r;
      let Y3r = g^p3;(*1.1.2*)
      let Yr = Y2r * Y3r;
      let X3r = g^p3;(*1.1.2*)

    let gprimer = g^Nr;
    (* let N = p1 * p2 * p3;*)
    (*X3 <- Gp3; Check*) (*ASK*)
          (* b <-$Bool;(b?T <-$ Gp1p2):(T<-$Gp1)*)
    let T1 = g^(p1*p3);(*1.1.3*)
    let T2 = g;(*1.1.3*)
    let Tr = u?T2:T1;(*1.1.3*)
    return (Nr,gprimer,g,Xr,X3r,Yr,Tr)(*REmoved e and gt*)
  };

(* part 2 *)

b <-$Bool;  (*2*)
  a,alpha <-$ Fq; (*3*)
  let pk = (N,g,g^a,g_t^alpha); (*3*)
  let om = g_t^alpha; (*4*)

  S<-$ArrFq;(*Array creation*) (*4*)
  (kprimesf,lsf,ksf,kprime,l,k,kprime,kth,lkth) <- A1(N,g,g^a,om,S) with (*5*)
  B2()= {
  p<-ArrFq;
	t, tprimer,h <-$Fq;
	let R0 = g^a;
        let R0prime = g^p3; (*belongs to error*)
        Rprime<-$ ArrFq;
        let Y2r = g^p2;
        let Y3r = g^p3;
        for(i=0;i<q;i++):
        {
        let R[i]= g^Rprime[i];
        }

	let yx = Y2r*Y3r;
	let kprimesfr = (g^(alpha+(a*tprimer)))*((yx)^tprimer);
	let lsfr = g^(tprimer) * R0prime;
	let kprimekthr= (g^(alpha))*(T^a)*(R0)*((Y2r * Y3r)^h);
	let lkthr = T * R0prime;
	let kprimer = (g^(alpha+(a*t)))* R0;
	let lr = (g^t) * R0prime;

  for(i=0;i<q;i++);
  {
	let kthr[i] = (T ^ S[i]) * R[i];
	let ksfr[i] = (g^(S[i]+tprimer))*R[i];
	let kr[i] =(g^(S[i]+t))*R[i];
  }
	return(kprimesfr,lsfr,ksfr,kprimer,lr,kr,kprimekthr,lkthr,kthr);

      };
          (*----------------End of Part 2 ----------------------------------------------------*)

      (*------------------------Part 3------------------*)

      m0,m1,i,la,n<-$Fq;
      p,rc<-ArrFq;
      for(i=0;i<q;i++);
    	{
            assert ((r[i]*i)<>0);
    	}
      A<-$ArrFq;
      U<-$ArrFq;
      let U[1] = a;

      (Csf,Csfprime,csfdprime,D) <- A2(m0,m1,A,i,la,n) with
	B3()= {
        C<-ArrFq;
        mb <-$ Fq; (*mb is Fq?*)
        let X1 = g;
        let X2 = g;
        let Csfdprimer = X1 * X2;
        (*let T = Csfdprimer;*)
        for(i=0;i<q;i++);
        {
        let Csfprimer[i]= g^C[i];
        let Dr[i] = X1 * X2 ^ rc[i];
        let Csfr[i] = (X1 * X2) ^ (A[i] * U[i]) * (X1 * X2)^(-rc[i] * i );
        }
        return (Csfr,Csfprimer,Csfdprimer,Dr)(*Ask about return*);
      };

          (*---------------------------end of PART3-------------------------------*)
      (*-------------------------------part 4-------------------------------------*)

         S,r<-$ ArrFq;
          (Kq,Lq,K)<- A3(N,g,g^a,om,S) with
          B4() = {
         t,tprime<-$Fq;
         Rprime<-$ ArrFq;
         let R0= g^a;
         let Rprime0= g^a;
         let Kprimer = (g^(alpha + (a*t))) * R0;
         let Lr = g^(t) * Rprime0;
         for(i=0;i<q;i++);
         {
         let R[i] = g^Rprime[i];
         let Kr[i] = g^(S[i]+t) * R[i];
         }
         return(Kprimer,Lr,K11r,K12r,K13r);
         };
 (*-----------------------------------end of PART 4----------------------*)

 b' <- A4(N,g,g^a,om,S,Kq,Lq,K1); (*Need to check the inputs  *)
 (* b' <-A5(N,g,g^a,om); *)

]: b = b'.
norm.



move a1 1.
move a2 2.
move a3 3.
move rx 4. 
move ry 5.
abstract 6 arg (g^1,g^(a1),g^(a2),g^(a3),g^(rx),g^(ry),g_t^((a1*a2)+a3+(rx*ry))).
abstract 44 res (b = b'). 
assumption_decisional SDA2_game2 -> [6 res] q. 
norm.

indep!.
print_proof!.
qed.
