bilinear_map e: G * G -> G_t.

(* Oracles *)
oracle B2 : () -> (G * G * G * G * G * G * G * G * G * G * G * G * G * G * G).
oracle B3 : () -> (G * G * G * G * G * G * G * G * G * G).
oracle KeyGen : ()-> (Fq * G * G * G * G * G * G).
oracle B4 : () -> (G * G * G * G * G).

(* adversary *)
adversary B1 : () -> (Fq * G * G * G * G * G * G).
adversary A2 : (Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq * Fq ) -> (G * G * G * G * G * G * G * G * G * G ).
adversary A1 : (Fq * G * G * G_t * Fq * Fq * Fq) -> (G * G * G * G * G * G * G * G * G * G * G * G * G * G * G).
adversary A3 : (Fq * G * G * G_t * Fq * Fq * Fq) -> (G * G * G * G * G).
adversary A4 : (Fq * G * G * G_t * Fq * Fq * Fq * G * G * G * G * G) -> Bool.
adversary A5 : (Fq * G * G * G_t) -> Bool.

(*Assumptions*)
adversary game1: (G * G * G * G * G * G * G_t) -> Bool.
assumption SDA2_game1
[r1,r2,r3,c,d<-$ Fq; b <- game1(g^1,g^(r1),g^(r2),g^(r3),g^(c),g^(d),g_t^((r1*r2)+r3+(c*d)));] 
 [r1,r2,r3,c,d,t <-$ Fq; b <- game1(g^1,g^(r1),g^(r2),g^(r3),g^(r2*c),g^(r3*d),g_t^(t));].

bound_adv [
    u <-$Bool;
    (N,gprime,g1,X,X3,Y,T) <- B1() with (* included X1*X2,Y1*Y2 terms*)
    KeyGen()={
      p1,p2,p3,Nr<-$Fq;(*gprime cannot be FQ ask*)(*1.1.1*)
      let X1r = g^p1; (*1.1.2*)
      let Y2r = g^p2; (*1.1.2*)
      let X2r = g^p2;
      let Xr = X1r* X2r;
      let Y3r = g^p3;(*1.1.2*)
      let Yr = Y2r * Y3r;
      let X3r = g^p3;(*1.1.2*)

    let gprimer = g^Nr;
    (* let N = p1 * p2 * p3;*)
    (*X3 <- Gp3; Check*) (*ASK*)
          (* b <-$Bool;(b?T <-$ Gp1p2):(T<-$Gp1)*)
    let T1 = g^(p1*p3);
    let T2 = g;
    let Tr = u?T2:T1;
    return (Nr,gprimer,g,Xr,X3r,Yr,Tr)(*REmoved e and gt*)
  };

(* part 2 *)

  b <-$Bool;  (*2*)
  a,alpha <-$ Fq; (*3*)
  let pk = (N,g,g^a,g_t^alpha); (*3*)
  let om = g_t^alpha; (*4*)

  S <-Fq;
  (*S1,S2,S3<-$Fq;(*Array creation*) (*4*)*)
  (kprimesf,lsf,ksf,kprime,l,k,kprimensf,lnsf,knsf) <- A1(N,g,g^a,om,S) with (*5*)
  B2()= {
	t, tprimer,p3<-$Fq;
        let R0 = g^a;
        let Y2r = g^a;
        let Y3r =g^a;
        let R0prime = g^p3; (*belongs to error*)
        Rprime1,Rprime2,Rprime3<-$ Fq;


	let yx = Y2r*Y3r;
          (* From prev function*)
       (* let T1 = g^(p1*p3);
        let T2 = g;
        let Tr = u?T2:T1;*)
	let kprimesfr = g^(alpha+(a*tprimer))*((yx)^tprimer);
	let lsfr = g^(tprimer) * R0prime;
	let kprimensfr= g^(alpha)*(T^a)*(R0);
	let lnsfr = T * R0prime;
	let kprimer = g^(alpha+(a*t))* R0;
	let lr = g^t * R0prime;
  for(i=0;i<q;i++);
  {
  let R[i]= g^Rprime[i];
  let knsfr[i] = T ^ S[i] * R[i];
  let ksfr[i] = g^(S[i]+tprimer)*R[i];
  let Kr[i] = g^(S1+t)*R[i];
  }

	return(kprimesfr,lsfr,ksfr,kprimer,lr,kr,kprimensfr,lnsfr,knsfr);

      };
          (*----------------End of Part 2 ----------------------------------------------------*)

      (*------------------------Part 3------------------*)

      m0,m1,row1,row2,row3,la,n,p1,p2,p3 <-$Fq;
      rc1,rc2,rc3<-$ Fq;
      for(i=0;i<q;i++);
    	{
            assert ((r[i]*i)<>0);
    	}
      A<-$ArrFq;
      U<-$ArrFq;

      (Csf,Csfprime,csfdprime,D) <- A2(m0,m1,A,r,la,n) with
	B3()= {
        C,mb <-$ ArrFq; (*mb is Fq?*)
        let X1 = g;
        let X2 = g;
        let Csfdprimer = X1*X2;
        for(i=0;i<q;i++);
        {
        let Csfprimer[i]= g^C[i];
        let Dr[i] = (X1*X2) ^ rc[i];
        let Csfr[i] = (X1*X2) ^ (A[i] * a) * (X1*X2)^(-rc[i] * i);
        }

        return (Csfr[i],Csfprimer[i],Csfdprimer,Dr)(*Ask about return*);
      };

          (*---------------------------end of PART3-------------------------------*)
      (*-------------------------------part 4-------------------------------------*)

        S<-$ ArrFq;
        (Kq,Lq,K)<- A3(N,g,g^a,om,S) with
        B4() = {
        t,tprime<-$Fq;
        Rprime<-$ Fq;
        let R0= g^a;
        let R0prime= g^a;
        let Kprimer = g^(alpha + (a*t)) * R0;
        for(i=0;i<q;i++);
        {
        let R[i] = g^Rprime[i];
        let Kr[i] = g^(S[i]+t) * R[i];
        }
        (*guard(K not belongs to A* is *)
        let Lr = g^(t) * R0prime;
        return(Kprimer,Lr,Kr);
        };
 (*-----------------------------------end of PART 4----------------------*)

b' <- A4(N,g,g^a,om,S,Kq,Lq,K); (*Need to check the inputs  *)
 (* b' <-A5(N,g,g^a,om); *)

  ]:b = b'.
norm.

   
move a1 1.
move a2 2.
move a3 3.
move rx 4. 
move ry 5.
abstract 6 arg (g^1,g^(a1),g^(a2),g^(a3),g^(rx),g^(ry),g_t^((a1*a2)+a3+(rx*ry))).
abstract 51 res (b = b'). 
assumption_decisional SDA2_game1-> [6 res] q. 
norm.
indep!.
print_proof!.
qed.
